package huoltokirja.test;
// Generated by ComTest BEGIN
import java.util.List;
import static org.junit.Assert.*;
import org.junit.*;
import huoltokirja.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.20 10:31:19 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class HuoltokirjaTest {



  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTailisaa57 
   * @throws ApuException when error
   */
  @Test
  public void testKorvaaTailisaa57() throws ApuException {    // Huoltokirja: 57
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 60", 0, huoltokirja.getPyoria()); 
    Pyora pyora1 = new Pyora(); 
    pyora1.parse(" 1 |  Kottero  |  Helkama   | Jopo  | 2000   | abc123"); 
    huoltokirja.lisaa(pyora1); 
    assertEquals("From: Huoltokirja line: 64", 1, huoltokirja.getPyoria()); 
    Pyora pyora2 = new Pyora(); 
    pyora2.parse(" 1 |  Hybridi  |  Tunturi   | Pappa | 1999   | abc124"); 
    huoltokirja.korvaaTailisaa(pyora2); 
    assertEquals("From: Huoltokirja line: 68", 1, huoltokirja.getPyoria()); 
    assertEquals("From: Huoltokirja line: 69", "Hybridi", huoltokirja.annaPyora(0).anna(1)); 
    Pyora pyora3 = new Pyora(); 
    pyora3.parse(" 2 |  Citypyörä  |  Trek   | City | 2010   | poi567"); 
    huoltokirja.korvaaTailisaa(pyora3); 
    assertEquals("From: Huoltokirja line: 73", 2, huoltokirja.getPyoria()); 
    assertEquals("From: Huoltokirja line: 74", "Citypyörä", huoltokirja.annaPyora(1).anna(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTailisaa87 
   * @throws ApuException when error
   */
  @Test
  public void testKorvaaTailisaa87() throws ApuException {    // Huoltokirja: 87
    Pyora pyora = new Pyora(); 
    pyora.parse(" 1 |  Kottero  |  Helkama   | Jopo  | 2000   | abc123"); 
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 93", 0, huoltokirja.getHuoltoja()); 
    Huolto huolto1 = new Huolto(1); 
    huolto1.parse(" 1  |  1  |1.1.2019|50.00|  Iskari  | 100 | Öljynvaihto"); 
    huoltokirja.lisaa(huolto1); 
    assertEquals("From: Huoltokirja line: 97", 1, huoltokirja.getHuoltoja()); 
    Huolto huolto2 = new Huolto(1); 
    huolto2.parse(" 1  |  1  |1.2.2019|25.00|  Jarrut  | 150 | palat"); 
    huoltokirja.korvaaTailisaa(huolto2); 
    assertEquals("From: Huoltokirja line: 101", 1, huoltokirja.getHuoltoja()); 
    List<Huolto> loydetyt = huoltokirja.annaHuollot(pyora); 
    assertEquals("From: Huoltokirja line: 103", "Jarrut", loydetyt.get(0).getNimi()); 
    Huolto huolto3 = new Huolto(1); 
    huolto3.parse(" 2  |  1  |1.2.2019|25.00|  Jarrut  | 150 | palat"); 
    huoltokirja.korvaaTailisaa(huolto3); 
    assertEquals("From: Huoltokirja line: 107", 2, huoltokirja.getHuoltoja()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa120 
   * @throws ApuException when error
   */
  @Test
  public void testLisaa120() throws ApuException {    // Huoltokirja: 120
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 123", 0, huoltokirja.getHuoltoja()); 
    Huolto huolto = new Huolto(); 
    huoltokirja.lisaa(huolto); 
    assertEquals("From: Huoltokirja line: 126", 1, huoltokirja.getHuoltoja()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista138 
   * @throws ApuException when error
   */
  @Test
  public void testPoista138() throws ApuException {    // Huoltokirja: 138
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 141", 0, huoltokirja.getPyoria()); 
    Pyora pyora = new Pyora(); 
    pyora.parse(" 1 |  Kottero  |  Helkama   | Jopo  | 2000   | abc123"); 
    huoltokirja.lisaa(pyora); 
    assertEquals("From: Huoltokirja line: 145", 1, huoltokirja.getPyoria()); 
    huoltokirja.poista(pyora); 
    assertEquals("From: Huoltokirja line: 147", 0, huoltokirja.getPyoria()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista160 
   * @throws ApuException when error
   */
  @Test
  public void testPoista160() throws ApuException {    // Huoltokirja: 160
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 163", 0, huoltokirja.getHuoltoja()); 
    Huolto huolto1 = new Huolto(1); 
    huolto1.parse(" 1  |  1  |1.1.2019|50.00|  Iskari  | 100 | Öljynvaihto"); 
    huoltokirja.lisaa(huolto1); 
    assertEquals("From: Huoltokirja line: 167", 1, huoltokirja.getHuoltoja()); 
    Huolto huolto2 = new Huolto(1); 
    huolto2.parse(" 2  |  2  |2.2.2019|150.00|  Vaihteisto  | 150 | Pakka"); 
    huoltokirja.lisaa(huolto2); 
    assertEquals("From: Huoltokirja line: 171", 2, huoltokirja.getHuoltoja()); 
    huoltokirja.poista(huolto1); 
    assertEquals("From: Huoltokirja line: 173", 1, huoltokirja.getHuoltoja()); 
    huoltokirja.poista(huolto2); 
    assertEquals("From: Huoltokirja line: 175", 0, huoltokirja.getHuoltoja()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaPyora189 
   * @throws ApuException when error
   */
  @Test
  public void testAnnaPyora189() throws ApuException {    // Huoltokirja: 189
    Huoltokirja huoltokirja = new Huoltokirja(); 
    Pyora pyora1 = new Pyora(), pyora2 = new Pyora(); Pyora pyora3 = new Pyora(); 
    assertEquals("From: Huoltokirja line: 193", 0, huoltokirja.getPyoria()); 
    huoltokirja.lisaa(pyora1); assertEquals("From: Huoltokirja line: 194", 1, huoltokirja.getPyoria()); 
    huoltokirja.lisaa(pyora2); assertEquals("From: Huoltokirja line: 195", 2, huoltokirja.getPyoria()); 
    huoltokirja.lisaa(pyora3); assertEquals("From: Huoltokirja line: 196", 3, huoltokirja.getPyoria()); 
    assertEquals("From: Huoltokirja line: 197", pyora1, huoltokirja.annaPyora(0)); 
    assertEquals("From: Huoltokirja line: 198", pyora2, huoltokirja.annaPyora(1)); 
    assertEquals("From: Huoltokirja line: 199", pyora3, huoltokirja.annaPyora(2)); 
    try {
    assertEquals("From: Huoltokirja line: 200", pyora3, huoltokirja.annaPyora(3)); 
    fail("Huoltokirja: 200 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    try {
    assertEquals("From: Huoltokirja line: 201", pyora3, huoltokirja.annaPyora(-1)); 
    fail("Huoltokirja: 201 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaHuollot215 
   * @throws ApuException when error
   */
  @Test
  public void testAnnaHuollot215() throws ApuException {    // Huoltokirja: 215
    Huoltokirja huoltokirja = new Huoltokirja(); 
    Pyora pyora = new Pyora(); 
    pyora.parse(" 1 |  Kottero  |  Helkama   | Jopo  | 2000   | abc123"); 
    Huolto huolto1 = new Huolto(1); 
    huoltokirja.lisaa(huolto1); 
    assertEquals("From: Huoltokirja line: 223", true, huoltokirja.annaHuollot(pyora).get(0) == huolto1); 
    try {
    assertEquals("From: Huoltokirja line: 224", false, huoltokirja.annaHuollot(pyora).get(1) == huolto1); 
    fail("Huoltokirja: 224 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); } // varmistetaan että muita huoltoja ei ole.
    Huolto huolto2 = new Huolto(1); 
    huoltokirja.lisaa(huolto2); 
    assertEquals("From: Huoltokirja line: 227", true, huoltokirja.annaHuollot(pyora).get(1) == huolto2); 
    Pyora pyora2 = new Pyora(); 
    pyora.parse(" 2 |  Hybridi  |  Tunturi   | ei tiedossa  | 1950   | afvgdg123"); 
    try {
    assertEquals("From: Huoltokirja line: 230", true, huoltokirja.annaHuollot(pyora2).get(0) == null); 
    fail("Huoltokirja: 230 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiPyorat279 
   * @throws ApuException when error
   */
  @Test
  public void testEtsiPyorat279() throws ApuException {    // Huoltokirja: 279
    Huoltokirja huoltokirja = new Huoltokirja(); 
    Pyora pyora = new Pyora(); 
    pyora.parse(" 4 |  Kottero  |  Helkama   | Jopo  | 2000   | abc123"); 
    huoltokirja.lisaa(pyora); 
    Pyora pyora2 = new Pyora(); 
    pyora2.parse(" 5 |  Kaupunkipyörä  |  Helkama   | Jopo  | 2020   | fgh236"); 
    huoltokirja.lisaa(pyora2); 
    Pyora pyora3 = new Pyora(); 
    pyora3.parse(" 5 |  Gravel  |  Helkama   | CS2800  | 2010   | GR4321"); 
    huoltokirja.lisaa(pyora3); 
    List<Pyora> loydetyt = huoltokirja.etsiPyorat("*K*", 1); 
    assertEquals("From: Huoltokirja line: 293", 2, loydetyt.size()); 
    assertEquals("From: Huoltokirja line: 294", true, loydetyt.get(0) == pyora2); 
    assertEquals("From: Huoltokirja line: 295", true, loydetyt.get(1) == pyora); 
    loydetyt = huoltokirja.etsiPyorat("*Helkama*", 2); 
    assertEquals("From: Huoltokirja line: 297", 3, loydetyt.size()); 
    loydetyt = huoltokirja.etsiPyorat("*S*", 3); 
    assertEquals("From: Huoltokirja line: 299", 1, loydetyt.size()); 
    assertEquals("From: Huoltokirja line: 300", true, loydetyt.get(0) == pyora3); 
    loydetyt = huoltokirja.etsiPyorat("*20*", 4); 
    assertEquals("From: Huoltokirja line: 302", 3, loydetyt.size()); 
    assertEquals("From: Huoltokirja line: 303", true, loydetyt.get(0) == pyora); 
    assertEquals("From: Huoltokirja line: 304", true, loydetyt.get(1) == pyora3); 
    assertEquals("From: Huoltokirja line: 305", true, loydetyt.get(2) == pyora2); 
    loydetyt = huoltokirja.etsiPyorat("*1*", 5); 
    assertEquals("From: Huoltokirja line: 307", 2, loydetyt.size()); 
    assertEquals("From: Huoltokirja line: 308", true, loydetyt.get(0) == pyora); 
    assertEquals("From: Huoltokirja line: 309", true, loydetyt.get(1) == pyora3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiHuollot324 
   * @throws ApuException when error
   */
  @Test
  public void testEtsiHuollot324() throws ApuException {    // Huoltokirja: 324
    Huoltokirja huoltokirja = new Huoltokirja(); 
    Huolto huolto = new Huolto(); 
    huolto.parse(" 2  |  2  | 1.1.2019|200  | Iskari  | 100 | Öljynvaihto"); 
    huoltokirja.lisaa(huolto); 
    Huolto huolto2 = new Huolto(); 
    huolto2.parse(" 3  |  3  | 1.6.2020|300  | Jarru  | 120 | palat"); 
    huoltokirja.lisaa(huolto2); 
    Huolto huolto3 = new Huolto(); 
    huolto3.parse(" 3  |  2  | 1.12.2021|400  | Vaihteisto  | 140 | Pakka"); 
    huoltokirja.lisaa(huolto3); 
    List<Huolto> loydetyt = huoltokirja.etsiHuollot("*2019*", 2, 2); 
    assertEquals("From: Huoltokirja line: 337", 1, loydetyt.size()); 
    assertEquals("From: Huoltokirja line: 338", true, loydetyt.get(0) == huolto); 
    loydetyt = huoltokirja.etsiHuollot("*300*", 3, 3); 
    assertEquals("From: Huoltokirja line: 340", 1, loydetyt.size()); 
    assertEquals("From: Huoltokirja line: 341", true, loydetyt.get(0) == huolto2); 
    loydetyt = huoltokirja.etsiHuollot("*i*", 4, 2); 
    assertEquals("From: Huoltokirja line: 343", 2, loydetyt.size()); 
    assertEquals("From: Huoltokirja line: 344", true, loydetyt.get(0) == huolto); 
    assertEquals("From: Huoltokirja line: 345", true, loydetyt.get(1) == huolto3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaHinnat358 
   * @throws ApuException when error
   */
  @Test
  public void testAnnaHinnat358() throws ApuException {    // Huoltokirja: 358
    Huoltokirja huoltokirja = new Huoltokirja(); 
    Huolto huolto = new Huolto(); 
    huolto.parse(" 2  |  2  | 1.1.2020|200  | Iskari  | 100 | Öljynvaihto"); 
    huoltokirja.lisaa(huolto); 
    Huolto huolto2 = new Huolto(); 
    huolto2.parse(" 3  |  3  | 1.6.2020|300  | Jarru  | 100 | palat"); 
    huoltokirja.lisaa(huolto2); 
    Huolto huolto3 = new Huolto(); 
    huolto3.parse(" 4  |  4  | 1.12.2019|400  | Jarru  | 100 | palat"); 
    huoltokirja.lisaa(huolto3); 
    double[] hinnat = huoltokirja.annaHinnat(2020); 
    assertEquals("From: Huoltokirja line: 371", 200, hinnat[0], 0.000001); assertEquals("From: Huoltokirja line: 371", 0, hinnat[1], 0.000001); assertEquals("From: Huoltokirja line: 371", 0, hinnat[2], 0.000001); assertEquals("From: Huoltokirja line: 371", 0, hinnat[3], 0.000001); assertEquals("From: Huoltokirja line: 371", 0, hinnat[4], 0.000001); assertEquals("From: Huoltokirja line: 371", 300, hinnat[5], 0.000001); 
    assertEquals("From: Huoltokirja line: 372", 0, hinnat[6], 0.000001); assertEquals("From: Huoltokirja line: 372", 0, hinnat[7], 0.000001); assertEquals("From: Huoltokirja line: 372", 0, hinnat[8], 0.000001); assertEquals("From: Huoltokirja line: 372", 0, hinnat[9], 0.000001); assertEquals("From: Huoltokirja line: 372", 0, hinnat[10], 0.000001); assertEquals("From: Huoltokirja line: 372", 0, hinnat[11], 0.000001); 
    hinnat = huoltokirja.annaHinnat(2019); 
    assertEquals("From: Huoltokirja line: 374", 0, hinnat[0], 0.000001); assertEquals("From: Huoltokirja line: 374", 0, hinnat[1], 0.000001); assertEquals("From: Huoltokirja line: 374", 0, hinnat[2], 0.000001); assertEquals("From: Huoltokirja line: 374", 0, hinnat[3], 0.000001); assertEquals("From: Huoltokirja line: 374", 0, hinnat[4], 0.000001); assertEquals("From: Huoltokirja line: 374", 0, hinnat[5], 0.000001); 
    assertEquals("From: Huoltokirja line: 375", 0, hinnat[6], 0.000001); assertEquals("From: Huoltokirja line: 375", 0, hinnat[7], 0.000001); assertEquals("From: Huoltokirja line: 375", 0, hinnat[8], 0.000001); assertEquals("From: Huoltokirja line: 375", 0, hinnat[9], 0.000001); assertEquals("From: Huoltokirja line: 375", 0, hinnat[10], 0.000001); assertEquals("From: Huoltokirja line: 375", 400, hinnat[11], 0.000001); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaVuodet387 
   * @throws ApuException when error
   */
  @Test
  public void testAnnaVuodet387() throws ApuException {    // Huoltokirja: 387
    Huoltokirja huoltokirja = new Huoltokirja(); 
    Huolto huolto = new Huolto(); 
    huolto.parse(" 2  |  2  | 1.1.2020|200  | Iskari  | 100 | Öljynvaihto"); 
    huoltokirja.lisaa(huolto); 
    Huolto huolto2 = new Huolto(); 
    huolto2.parse(" 3  |  3  | 1.6.2021|300  | Jarru  | 100 | palat"); 
    huoltokirja.lisaa(huolto2); 
    Huolto huolto3 = new Huolto(); 
    huolto3.parse(" 4  |  4  | 1.12.2018|400  | Jarru  | 100 | palat"); 
    huoltokirja.lisaa(huolto3); 
    List<String> vuodet = huoltokirja.annaVuodet(); 
    assertEquals("From: Huoltokirja line: 400", 3, vuodet.size()); 
    assertEquals("From: Huoltokirja line: 401", "2018", vuodet.get(0)); 
    assertEquals("From: Huoltokirja line: 402", "2020", vuodet.get(1)); 
    assertEquals("From: Huoltokirja line: 403", "2021", vuodet.get(2)); 
  } // Generated by ComTest END
}