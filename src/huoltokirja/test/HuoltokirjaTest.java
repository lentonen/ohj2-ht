package huoltokirja.test;
// Generated by ComTest BEGIN
import java.util.List;
import static org.junit.Assert.*;
import org.junit.*;
import huoltokirja.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.19 13:32:21 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class HuoltokirjaTest {



  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTailisaa58 
   * @throws ApuException when error
   */
  @Test
  public void testKorvaaTailisaa58() throws ApuException {    // Huoltokirja: 58
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 61", 0, huoltokirja.getPyoria()); 
    Pyora pyora1 = new Pyora(); 
    pyora1.parse(" 1 |  Kottero  |  Helkama   | Jopo  | 2000   | abc123"); 
    huoltokirja.lisaa(pyora1); 
    assertEquals("From: Huoltokirja line: 65", 1, huoltokirja.getPyoria()); 
    Pyora pyora2 = new Pyora(); 
    pyora2.parse(" 1 |  Hybridi  |  Tunturi   | Pappa | 1999   | abc124"); 
    huoltokirja.korvaaTailisaa(pyora2); 
    assertEquals("From: Huoltokirja line: 69", 1, huoltokirja.getPyoria()); 
    assertEquals("From: Huoltokirja line: 70", "Hybridi", huoltokirja.annaPyora(0).anna(1)); 
    Pyora pyora3 = new Pyora(); 
    pyora3.parse(" 2 |  Citypyörä  |  Trek   | City | 2010   | poi567"); 
    huoltokirja.korvaaTailisaa(pyora3); 
    assertEquals("From: Huoltokirja line: 74", 2, huoltokirja.getPyoria()); 
    assertEquals("From: Huoltokirja line: 75", "Citypyörä", huoltokirja.annaPyora(1).anna(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTailisaa88 
   * @throws ApuException when error
   */
  @Test
  public void testKorvaaTailisaa88() throws ApuException {    // Huoltokirja: 88
    Pyora pyora = new Pyora(); 
    pyora.parse(" 1 |  Kottero  |  Helkama   | Jopo  | 2000   | abc123"); 
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 94", 0, huoltokirja.getHuoltoja()); 
    Huolto huolto1 = new Huolto(1); 
    huolto1.parse(" 1  |  1  |1.1.2019|50.00|  Iskari  | 100 | Öljynvaihto"); 
    huoltokirja.lisaa(huolto1); 
    assertEquals("From: Huoltokirja line: 98", 1, huoltokirja.getHuoltoja()); 
    Huolto huolto2 = new Huolto(1); 
    huolto2.parse(" 1  |  1  |1.2.2019|25.00|  Jarrut  | 150 | palat"); 
    huoltokirja.korvaaTailisaa(huolto2); 
    assertEquals("From: Huoltokirja line: 102", 1, huoltokirja.getHuoltoja()); 
    List<Huolto> loydetyt = huoltokirja.annaHuollot(pyora); 
    assertEquals("From: Huoltokirja line: 104", "Jarrut", loydetyt.get(0).getNimi()); 
    Huolto huolto3 = new Huolto(1); 
    huolto3.parse(" 2  |  1  |1.2.2019|25.00|  Jarrut  | 150 | palat"); 
    huoltokirja.korvaaTailisaa(huolto3); 
    assertEquals("From: Huoltokirja line: 108", 2, huoltokirja.getHuoltoja()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa121 
   * @throws ApuException when error
   */
  @Test
  public void testLisaa121() throws ApuException {    // Huoltokirja: 121
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 124", 0, huoltokirja.getHuoltoja()); 
    Huolto huolto = new Huolto(); 
    huoltokirja.lisaa(huolto); 
    assertEquals("From: Huoltokirja line: 127", 1, huoltokirja.getHuoltoja()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista140 
   * @throws ApuException when error
   */
  @Test
  public void testPoista140() throws ApuException {    // Huoltokirja: 140
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 143", 0, huoltokirja.getPyoria()); 
    Pyora pyora = new Pyora(); 
    pyora.parse(" 1 |  Kottero  |  Helkama   | Jopo  | 2000   | abc123"); 
    huoltokirja.lisaa(pyora); 
    assertEquals("From: Huoltokirja line: 147", 1, huoltokirja.getPyoria()); 
    huoltokirja.poista(pyora); 
    assertEquals("From: Huoltokirja line: 149", 0, huoltokirja.getPyoria()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista162 
   * @throws ApuException when error
   */
  @Test
  public void testPoista162() throws ApuException {    // Huoltokirja: 162
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 165", 0, huoltokirja.getHuoltoja()); 
    Huolto huolto1 = new Huolto(1); 
    huolto1.parse(" 1  |  1  |1.1.2019|50.00|  Iskari  | 100 | Öljynvaihto"); 
    huoltokirja.lisaa(huolto1); 
    assertEquals("From: Huoltokirja line: 169", 1, huoltokirja.getHuoltoja()); 
    Huolto huolto2 = new Huolto(1); 
    huolto2.parse(" 2  |  2  |2.2.2019|150.00|  Vaihteisto  | 150 | Pakka"); 
    huoltokirja.lisaa(huolto2); 
    assertEquals("From: Huoltokirja line: 173", 2, huoltokirja.getHuoltoja()); 
    huoltokirja.poista(huolto1); 
    assertEquals("From: Huoltokirja line: 175", 1, huoltokirja.getHuoltoja()); 
    huoltokirja.poista(huolto2); 
    assertEquals("From: Huoltokirja line: 177", 0, huoltokirja.getHuoltoja()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaHuollot203 
   * @throws ApuException when error
   */
  @Test
  public void testAnnaHuollot203() throws ApuException {    // Huoltokirja: 203
    Huoltokirja huoltokirja = new Huoltokirja(); 
    Pyora pyora = new Pyora(); 
    pyora.parse(" 1 |  Kottero  |  Helkama   | Jopo  | 2000   | abc123"); 
    Huolto huolto1 = new Huolto(1); 
    huoltokirja.lisaa(huolto1); 
    assertEquals("From: Huoltokirja line: 211", true, huoltokirja.annaHuollot(pyora).get(0) == huolto1); 
    try {
    assertEquals("From: Huoltokirja line: 212", false, huoltokirja.annaHuollot(pyora).get(1) == huolto1); 
    fail("Huoltokirja: 212 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); } // varmistetaan että muita huoltoja ei ole.
    Huolto huolto2 = new Huolto(1); 
    huoltokirja.lisaa(huolto2); 
    assertEquals("From: Huoltokirja line: 215", true, huoltokirja.annaHuollot(pyora).get(1) == huolto2); 
    Pyora pyora2 = new Pyora(); 
    pyora.parse(" 2 |  Hybridi  |  Tunturi   | ei tiedossa  | 1950   | afvgdg123"); 
    try {
    assertEquals("From: Huoltokirja line: 218", true, huoltokirja.annaHuollot(pyora2).get(0) == null); 
    fail("Huoltokirja: 218 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}