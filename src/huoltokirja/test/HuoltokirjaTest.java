package huoltokirja.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import huoltokirja.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.09 20:38:27 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class HuoltokirjaTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa79 
   * @throws ApuException when error
   */
  @Test
  public void testLisaa79() throws ApuException {    // Huoltokirja: 79
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 82", 0, huoltokirja.getHuoltoja()); 
    Huolto huolto = new Huolto(); 
    huoltokirja.lisaa(huolto); 
    assertEquals("From: Huoltokirja line: 85", 1, huoltokirja.getHuoltoja()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista98 
   * @throws ApuException when error
   */
  @Test
  public void testPoista98() throws ApuException {    // Huoltokirja: 98
    Huoltokirja huoltokirja = new Huoltokirja(); 
    assertEquals("From: Huoltokirja line: 101", 0, huoltokirja.getPyoria()); 
    Pyora pyora = new Pyora(); 
    pyora.parse(" 1 |  Kottero  |  Helkama   | Jopo  | 2000   | abc123"); 
    huoltokirja.lisaa(pyora); 
    assertEquals("From: Huoltokirja line: 105", 1, huoltokirja.getPyoria()); 
    huoltokirja.poista(pyora); 
    assertEquals("From: Huoltokirja line: 107", 0, huoltokirja.getPyoria()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaHuollot132 
   * @throws ApuException when error
   */
  @Test
  public void testAnnaHuollot132() throws ApuException {    // Huoltokirja: 132
    Huoltokirja huoltokirja = new Huoltokirja(); 
    Pyora pyora = new Pyora(); 
    pyora.parse(" 1 |  Kottero  |  Helkama   | Jopo  | 2000   | abc123"); 
    Huolto huolto1 = new Huolto(1); 
    huoltokirja.lisaa(huolto1); 
    assertEquals("From: Huoltokirja line: 140", true, huoltokirja.annaHuollot(pyora).get(0) == huolto1); 
    try {
    assertEquals("From: Huoltokirja line: 141", false, huoltokirja.annaHuollot(pyora).get(1) == huolto1); 
    fail("Huoltokirja: 141 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    Huolto huolto2 = new Huolto(1); 
    huoltokirja.lisaa(huolto2); 
    assertEquals("From: Huoltokirja line: 144", true, huoltokirja.annaHuollot(pyora).get(1) == huolto2); 
    Pyora pyora2 = new Pyora(); 
    pyora.parse(" 2 |  Hybridi  |  Tunturi   | ei tiedossa  | 1950   | afvgdg123"); 
    try {
    assertEquals("From: Huoltokirja line: 147", true, huoltokirja.annaHuollot(pyora2).get(0) == null); 
    fail("Huoltokirja: 147 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}