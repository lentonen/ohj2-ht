package huoltokirja.test;
// Generated by ComTest BEGIN
import java.io.File;
import java.util.List;
import static org.junit.Assert.*;
import org.junit.*;
import huoltokirja.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.18 21:14:27 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class HuollotTest {



  // Generated by ComTest BEGIN
  /** 
   * testLueTiedosto50 
   * @throws ApuException when error
   */
  @Test
  public void testLueTiedosto50() throws ApuException {    // Huollot: 50
    Huollot huollot = new Huollot(); 
    Huolto huolto1 = new Huolto(1); huolto1.arvoHuolto(); huolto1.rekisteroi(); huollot.lisaa(huolto1); 
    Huolto huolto2 = new Huolto(2); huolto2.arvoHuolto(); huolto2.rekisteroi(); huollot.lisaa(huolto2); 
    String hakemisto = "testihuollot"; 
    String tiedNimi = hakemisto +"/huollot.dat"; 
    File ftied = new File(tiedNimi); 
    ftied.getParentFile().mkdirs(); 
    ftied.delete(); 
    try {
    huollot.lueTiedosto(hakemisto); 
    fail("Huollot: 64 Did not throw ApuException");
    } catch(ApuException _e_){ _e_.getMessage(); }
    huollot.tallenna(hakemisto); 
    huollot = new Huollot();  // Tehdään uusi huollot-olio vanhan päälle
    assertEquals("From: Huollot line: 67", 0, huollot.getLkm());  // Uudessa ei pitäisi olla yhtäkään huoltoa
    huollot.lueTiedosto(hakemisto); 
    assertEquals("From: Huollot line: 69", 2, huollot.getLkm());  // Uudessa pitäisi nyt olla kaksi aiemmin lisättyä huoltoa
    List<Huolto> eka = huollot.annaHuollot(1); 
    eka.get(0).equals(huolto1); 
    try {
    eka.get(1).equals(huolto1); 
    fail("Huollot: 72 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); } // Pyörälle 1 on lisätty vain yksi huolto
    List<Huolto> toka = huollot.annaHuollot(2); 
    toka.get(0).equals(huolto2); 
    try {
    toka.get(1).equals(huolto2); 
    fail("Huollot: 75 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); } // Pyörälle 2 on lisätty vain yksi huolto
    assertEquals("From: Huollot line: 76", true, ftied.delete());  // tuhoaa .dat-tiedoston
    assertEquals("From: Huollot line: 77", true, ftied.getParentFile().delete());  // tuhoaa testikansion
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaHuollot144 */
  @Test
  public void testAnnaHuollot144() {    // Huollot: 144
    Huollot huollot = new Huollot(); 
    Huolto huolto1 = new Huolto(1); huolto1.arvoHuolto(); huolto1.rekisteroi(); huollot.lisaa(huolto1); 
    assertEquals("From: Huollot line: 147", true, huollot.annaHuollot(1).get(0) == huolto1); 
    try {
    assertEquals("From: Huollot line: 148", false, huollot.annaHuollot(1).get(1) == huolto1); 
    fail("Huollot: 148 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    Huolto huolto2 = new Huolto(1); huolto2.arvoHuolto(); huolto2.rekisteroi(); huollot.lisaa(huolto2); 
    assertEquals("From: Huollot line: 150", true, huollot.annaHuollot(1).get(1) == huolto2); 
    Huolto huolto3 = new Huolto(2); huolto3.arvoHuolto(); huolto3.rekisteroi(); huollot.lisaa(huolto3); 
    assertEquals("From: Huollot line: 152", true, huollot.annaHuollot(2).get(0) == huolto3); 
    try {
    assertEquals("From: Huollot line: 153", true, huollot.annaHuollot(3).get(0) == huolto3); 
    fail("Huollot: 153 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testKorvaaTaiLisaa168 */
  @Test
  public void testKorvaaTaiLisaa168() {    // Huollot: 168
    Huollot huollot = new Huollot(); 
    Huolto huolto1 = new Huolto(1); 
    huolto1.parse(" 1  |  1  |1.1.2019|50.00|  Iskari  | 100 | Öljynvaihto"); 
    huollot.lisaa(huolto1); 
    Huolto huolto2 = new Huolto(1); 
    huolto2.parse(" 2  |  1  |1.2.2019|25.00|  Jarrut  | 150 | palat"); 
    huollot.lisaa(huolto2); 
    assertEquals("From: Huollot line: 176", 1, huolto1.getTunnusNro()); 
    assertEquals("From: Huollot line: 177", 2, huolto2.getTunnusNro()); 
    assertEquals("From: Huollot line: 178", true, huollot.annaHuollot(1).get(0) == huolto1); 
    assertEquals("From: Huollot line: 179", true, huollot.annaHuollot(1).get(1) == huolto2); 
    Huolto huolto3 = new Huolto(); 
    huolto3.parse(" 1  |  1  |1.1.2019|51.00|  Iskari  | 100 | Öljynvaihto"); 
    assertEquals("From: Huollot line: 182", "Iskari", huolto3.getNimi()); 
    huollot.korvaaTaiLisaa(huolto3); 
    assertEquals("From: Huollot line: 184", true, huollot.annaHuollot(1).get(0) == huolto3); 
    assertEquals("From: Huollot line: 185", "Iskari", huollot.annaHuollot(1).get(0).getNimi()); 
    Huolto huolto4 = new Huolto(); 
    huolto4.parse(" 3  |  1  |1.3.2019|150.00|  Satulatolppa | 175 | Tiivisteet"); 
    huollot.korvaaTaiLisaa(huolto4); 
    assertEquals("From: Huollot line: 189", true, huollot.annaHuollot(1).get(2) == huolto4); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaVuodet324 
   * @throws IndexOutOfBoundsException when error
   */
  @Test
  public void testAnnaVuodet324() throws IndexOutOfBoundsException {    // Huollot: 324
    Huollot huollot = new Huollot(); 
    Huolto huolto = new Huolto(); 
    huolto.parse(" 2  |  2  | 1.1.2020|200  | Iskari  | 100 | Öljynvaihto"); 
    huollot.lisaa(huolto); 
    assertEquals("From: Huollot line: 330", "2020", huollot.annaVuodet().get(0)); 
    try {
    assertEquals("From: Huollot line: 331", "", huollot.annaVuodet().get(1)); 
    fail("Huollot: 331 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    Huolto huolto2 = new Huolto(); 
    huolto2.parse(" 3  |  3  | 1.1.2021|200  | Jarru  | 100 | palat"); 
    huollot.lisaa(huolto2); 
    assertEquals("From: Huollot line: 335", "2021", huollot.annaVuodet().get(1)); 
    Huolto huolto3 = new Huolto(); 
    huolto3.parse(" 4  |  4  | 1.1.2019|200  | Jarru  | 100 | palat"); 
    huollot.lisaa(huolto3); 
    assertEquals("From: Huollot line: 339", "2019", huollot.annaVuodet().get(0)); 
    assertEquals("From: Huollot line: 340", "2020", huollot.annaVuodet().get(1)); 
    assertEquals("From: Huollot line: 341", "2021", huollot.annaVuodet().get(2)); 
  } // Generated by ComTest END
}